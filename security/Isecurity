using Microsoft.AspNetCore.Authentication;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text.Encodings.Web;
using System.Threading.Tasks;

namespace RobloxGameServerAPI.Security
{
    public class ApiKeyAuthenticationSchemeOptions : AuthenticationSchemeOptions { }

    public class ApiKeyAuthenticationHandler : AuthenticationHandler<ApiKeyAuthenticationSchemeOptions>
    {
        private const string ApiKeyHeaderName = "X-API-Key";

        private static readonly Dictionary<string, string> ValidApiKeys = new Dictionary<string, string>
        {
            { "valid-api-key-1", "Developer 1" },
            { "valid-api-key-2", "Developer 2" }
        };

        public ApiKeyAuthenticationHandler(IOptionsMonitor<ApiKeyAuthenticationSchemeOptions> options,
            ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock)
            : base(options, logger, encoder, clock)
        {
        }

        protected override async Task<AuthenticateResult> HandleAuthenticateAsync()
        {
            if (!Request.Headers.ContainsKey(ApiKeyHeaderName))
            {
                return AuthenticateResult.Fail("API Key header missing."); // Reject request if API Key header is not present
            }

            string apiKey = Request.Headers[ApiKeyHeaderName];

            if (string.IsNullOrEmpty(apiKey))
            {
                return AuthenticateResult.Fail("API Key missing or empty."); // Reject if API Key value is empty
            }

            // In a real application, you would validate the API Key against a secure store (database, secrets manager, external service)
            if (!ValidApiKeys.TryGetValue(apiKey, out string developerName))
            {
                return AuthenticateResult.Fail("Invalid API Key."); // Reject if API Key is not found in the valid keys list
            }

            // API Key is valid - Create claims and authentication ticket
            var claims = new[] {
                new Claim(ClaimTypes.Name, developerName), // Add developer name as a claim
                new Claim("ApiKey", apiKey),              // Add API Key as a claim (for auditing or logging)
                new Claim("Permission", "server.manage"), // Example: Add "server.manage" permission claim
                new Claim("Permission", "server.status.read") // Example: Add "server.status.read" permission claim
            };
            var identity = new ClaimsIdentity(claims, Scheme.Name); // Create ClaimsIdentity with claims and authentication scheme name
            var principal = new ClaimsPrincipal(identity);         // Create ClaimsPrincipal
            var ticket = new AuthenticationTicket(principal, Scheme.Name); // Create AuthenticationTicket

            return AuthenticateResult.Success(ticket); // Authentication successful - return success with ticket
        }
    }
}
